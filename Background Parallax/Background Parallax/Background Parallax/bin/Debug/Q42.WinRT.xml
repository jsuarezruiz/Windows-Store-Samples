<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Q42.WinRT</name>
    </assembly>
    <members>
        <member name="M:Q42.WinRT.Controls.ImageExtensions.GetCacheUri(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the CacheUri property. This dependency property 
            WebUri that has to be cached
            </summary>
        </member>
        <member name="M:Q42.WinRT.Controls.ImageExtensions.SetCacheUri(Windows.UI.Xaml.DependencyObject,System.Uri)">
            <summary>
            Sets the CacheUri property. This dependency property 
            WebUri that has to be cached
            </summary>
        </member>
        <member name="T:Q42.WinRT.Controls.SettingsFlyout">
            <summary>
            Flyout that can host a UserControl
            </summary>
        </member>
        <member name="M:Q42.WinRT.Controls.WebViewExtensions.GetSourceHtml(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the SourceHtmlProperty property. This dependency property 
            </summary>
        </member>
        <member name="M:Q42.WinRT.Controls.WebViewExtensions.SetSourceHtml(Windows.UI.Xaml.DependencyObject,System.String)">
            <summary>
            Sets the SourceHtmlProperty property. This dependency property 
            </summary>
        </member>
        <member name="T:Q42.WinRT.Controls.WrapPanel">
            <summary>
            WrapPanel implementation ported from Silverlight
            http://www.codeproject.com/Articles/24141/WrapPanel-for-Silverlight-2-0
            </summary>
        </member>
        <member name="T:Q42.WinRT.Converters.ByteToStringConverter">
            <summary>
            Converts Bytes to Strings
            Copied from Silverlight Multi File Uploader project:
            http://slfileupload.codeplex.com
            </summary>
        </member>
        <member name="T:Q42.WinRT.Converters.InverseVisibilityConverter">
            <summary>
            Converts anything to inverse visibility
            I know the VisibilityConvert supports the input parameter !. But it's easier to have two converters
            </summary>
        </member>
        <member name="T:Q42.WinRT.Converters.ParallaxConverter">
            <summary>
            Source: http://w8isms.blogspot.nl/2012/06/metro-parallax-background-in-xaml.html
            Used to create background parallex like on the Win8 start screen
            </summary>
        </member>
        <member name="T:Q42.WinRT.Converters.StringFormatConverter">
            <summary>
            Does a simple String format
            </summary>
        </member>
        <member name="T:Q42.WinRT.Converters.TextToLowerConverter">
            <summary>
            Converts text to lowercase
            </summary>
        </member>
        <member name="T:Q42.WinRT.Converters.VisibilityConverter">
            <summary>
            Converts anything to inverse visibility
            </summary>
        </member>
        <member name="T:Q42.WinRT.Data.DataLoader">
            <summary>
            DataLoader that enables easy binding to Loading / Finished / Error properties
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Q42.WinRT.Data.DataLoader.#ctor(System.Nullable{System.Boolean})">
            <summary>
            DataLoader constructors
            </summary>
            <param name="catchErrors">Swallows exceptions</param>
        </member>
        <member name="M:Q42.WinRT.Data.DataLoader.LoadAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Action{``0},System.Action{System.Exception})">
            <summary>
             Load data. Errors will be in errorcallback
            </summary>
            <param name="loadingMethod">The task is hot and already running</param>
            <param name="errorCallback">optional error callback. Fires when exceptino is thrown in loadingMethod</param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Data.DataLoader.LoadCacheThenRefreshAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.Threading.Tasks.Task{``0}},System.Action{``0},System.Action{System.Exception})">
            <summary>
            First returns result callback with result from cache, then from refresh method
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheLoadingMethod"></param>
            <param name="refreshLoadingMethod"></param>
            <param name="resultCallback"></param>
            <param name="errorCallback"></param>
            <returns></returns>
        </member>
        <member name="P:Q42.WinRT.Data.DataLoader.LoadingState">
            <summary>
            Current loading state
            </summary>
        </member>
        <member name="P:Q42.WinRT.Data.DataLoader.IsError">
            <summary>
            Indicates LoadingState == LoadingState.Error
            </summary>
        </member>
        <member name="P:Q42.WinRT.Data.DataLoader.IsBusy">
            <summary>
            Indicates LoadingState == LoadingState.Loading
            </summary>
        </member>
        <member name="P:Q42.WinRT.Data.DataLoader.IsFinished">
            <summary>
            Indicates LoadingState == LoadingState.Finished
            </summary>
        </member>
        <member name="T:Q42.WinRT.Data.JsonCache">
            <summary>
            Stores objects as json in the localstorage
            </summary>
        </member>
        <member name="M:Q42.WinRT.Data.JsonCache.GetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Get object based on key, or generate the value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="generate"></param>
            <param name="forceRefresh"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Data.JsonCache.GetFromCache``1(System.String)">
            <summary>
            Get value from cache
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Data.JsonCache.Set``1(System.String,``0)">
            <summary>
            Set value in cache
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Data.JsonCache.Delete(System.String)">
            <summary>
            Delete key from cache
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Data.JsonCache.ClearAll">
            <summary>
            Clear the complete cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Data.WebDataCache.GetAsync(System.Uri,System.Boolean)">
            <summary>
            Stores webdata in cache based on uri as key
            Returns file
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Data.WebDataCache.GetLocalUriAsync(System.Uri)">
            <summary>
            Stores webdata in cache based on uri as key
            Returns local uri
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Data.WebDataCache.GetFolderAsync">
            <summary>
            Get the cache folder to read/write
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Data.WebDataCache.SetAsync(System.Uri)">
            <summary>
            Insert given uri in cache. Data will be loaded from the web
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Data.WebDataCache.Delete(System.Uri)">
            <summary>
            Delete from cache based on Uri (=key)
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Data.WebDataCache.ClearAll">
            <summary>
            Clear the complete webcache
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Extensions.ToCacheKey(System.Uri)">
            <summary>
            Converts Uri to cache key extension method
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Extensions.ContainsFileAsync(Windows.Storage.StorageFolder,System.String)">
            <summary>
            Extension method to check if file exist in folder
            </summary>
            <param name="folder"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Extensions.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Similar in nature to Parallel.ForEach, with the primary difference being that Parallel.ForEach is a synchronous method and uses synchronous delegates.
            http://blogs.msdn.com/b/pfxteam/archive/2012/03/05/10278165.aspx
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="dop"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="T:Q42.WinRT.Storage.StorageHelper`1">
            <summary>
            Save object to local storage, serializes as json and writes object to a file
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Q42.WinRT.Storage.StorageHelper`1.DeleteAsync(System.String)">
            <summary>
            Delete file
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Q42.WinRT.Storage.StorageHelper`1.SaveAsync(`0,System.String)">
            <summary>
            Save object from file
            </summary>
            <param name="Obj"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Q42.WinRT.Storage.StorageHelper`1.LoadAsync(System.String)">
            <summary>
            Load object from file
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Storage.StorageHelper`1.GetFolderAsync">
            <summary>
            Get folder based on storagetype
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Storage.StorageHelper`1.ClearLocalAll">
            <summary>
            Clear the complete cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Util.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets a property name, usage: GetPropertyName(() => Object.PropertyName)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Q42.WinRT.Util.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" -->
        <member name="M:Q42.WinRT.Util.GetAppVersion">
            <summary>
            Get application version as formatted string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Util.GetOsVersionAsync">
            <summary>
            Uses the WebView control to get the OS Version from the UserAgent string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Util.GetUserAgent">
            <summary>
            Uses WebView control to get the user agent string
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
